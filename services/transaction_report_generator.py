from reportlab.lib import colors
from reportlab.lib.pagesizes import letter
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.units import inch
from reportlab.platypus import SimpleDocTemplate, Table, TableStyle, Paragraph, Spacer, Image, PageBreak
from datetime import datetime
from flask import current_app
import logging
import os
from itertools import groupby
from operator import itemgetter

class TransactionReportGenerator:
    """Handles generation of transaction-specific PDF reports."""
    
    def __init__(self):
        self.logger = logging.getLogger(__name__)
        self.styles = getSampleStyleSheet()
        self._setup_custom_styles()

    def _setup_custom_styles(self):
        """Set up custom styles for the report"""
        self.styles.add(ParagraphStyle(
            name='CustomTitle',
            parent=self.styles['Heading1'],
            fontSize=20,  # Reduced from 24
            spaceAfter=10,  # Reduced from 30
            textColor=colors.HexColor('#000080'),
            alignment=1  # Center alignment
        ))
        
        self.styles.add(ParagraphStyle(
            name='Metadata',
            parent=self.styles['Normal'],
            fontSize=9,
            spaceAfter=0,
            textColor=colors.black
        ))
        
        self.styles.add(ParagraphStyle(
            name='SubTitle',
            parent=self.styles['Heading1'],
            fontSize=12,  # Reduced from 14
            spaceAfter=6,  # Reduced from 20
            textColor=colors.HexColor('#000080')
        ))

        self.styles.add(ParagraphStyle(
            name='PropertyHeader',
            parent=self.styles['Heading1'],
            fontSize=11,
            spaceAfter=6,
            textColor=colors.HexColor('#000080')
        ))

        self.styles.add(ParagraphStyle(
            name='DescriptionCell',
            parent=self.styles['Normal'],
            fontSize=8,  # Reduced from 9
            leading=10,
            wordWrap='CJK',
            alignment=0  # Left alignment
        ))

    def _truncate_address(self, address):
        """Truncate address to show only house number, street, and city"""
        if not address or address == 'All Properties':
            return address
        parts = address.split(',')
        return ', '.join(parts[:2]).strip() if len(parts) >= 2 else parts[0].strip()

    def generate(self, transactions, buffer, metadata=None):
        """Generate a PDF report of transactions"""
        try:
            doc = SimpleDocTemplate(
                buffer,
                pagesize=letter,
                rightMargin=72,
                leftMargin=72,
                topMargin=72,
                bottomMargin=72
            )
            
            story = self._build_story(transactions, metadata)
            doc.build(story)
            return True
            
        except Exception as e:
            self.logger.error(f"Error generating PDF report: {str(e)}")
            raise

    def _build_story(self, transactions, metadata):
        """Build the content (story) for the PDF"""
        story = []

        # Sort transactions by date in descending order
        sorted_transactions = sorted(
            transactions,
            key=lambda x: x.get('date', ''),
            reverse=True
        )
        
        # Create a table for logo and title with minimal spacing
        try:
            logo_path = os.path.join(current_app.root_path, 'static', 'images', 'logo-blue.png')
            if os.path.exists(logo_path):
                img = Image(logo_path, width=0.75*inch, height=0.75*inch)
                title = Paragraph("Transaction Report", self.styles['CustomTitle'])
                header_table = Table([[img, title]], colWidths=[1*inch, 6*inch])
                header_table.setStyle(TableStyle([
                    ('ALIGN', (1, 0), (1, 0), 'CENTER'),
                    ('VALIGN', (0, 0), (-1, -1), 'TOP'),
                    ('TOPPADDING', (0, 0), (-1, -1), 0),
                    ('BOTTOMPADDING', (0, 0), (-1, -1), 10),
                ]))
                story.append(header_table)
        except Exception as e:
            self.logger.error(f"Error adding logo to report: {str(e)}")
            # Fallback to just title if logo fails
            story.append(Paragraph("Transaction Report", self.styles['CustomTitle']))
        
        # Create a table for metadata and summary
        if metadata:
            metadata_text = []
            if metadata.get('user'):
                metadata_text.append(f"Generated by: {metadata['user']}")
            if metadata.get('date_range'):
                metadata_text.append(f"Date Range: {metadata['date_range']}")
            if metadata.get('property'):
                truncated_address = self._truncate_address(metadata['property'])
                metadata_text.append(f"Property: {truncated_address}")
            
            meta_paragraphs = [Paragraph(text, self.styles['Metadata']) for text in metadata_text]
            
            # Get property transactions for summary
            property_id = metadata.get('property')
            if property_id and property_id != 'All Properties':
                summary_table = self._build_property_summary_table(transactions)
            else:
                summary_table = self._build_grand_summary_table(transactions)
            
            # Create table with metadata on left and summary on right
            meta_summary_table = Table(
                [[meta_paragraphs, summary_table[1]]],  # summary_table[1] is the actual table
                colWidths=[3.5*inch, 3.5*inch]
            )
            meta_summary_table.setStyle(TableStyle([
                ('ALIGN', (0, 0), (0, 0), 'LEFT'),
                ('ALIGN', (1, 0), (1, 0), 'RIGHT'),
                ('VALIGN', (0, 0), (-1, -1), 'TOP'),
            ]))
            story.append(meta_summary_table)
        
        story.append(Spacer(1, 20))

        property_id = metadata.get('property') if metadata else None
        
        if property_id and property_id != 'All Properties':
            # Single property report - just add transactions table
            story.extend(self._build_transactions_table(sorted_transactions))
        else:
            # All properties report
            # Group transactions by property
            grouped_transactions = groupby(
                sorted(sorted_transactions, key=lambda x: x.get('property_id', '')),
                key=lambda x: x.get('property_id', '')
            )

            for property_id, property_transactions in grouped_transactions:
                property_transactions = list(property_transactions)
                if not property_id:
                    continue

                # Add page break before each property
                story.append(PageBreak())

                # Add property header
                truncated_address = self._truncate_address(property_id)
                story.append(Paragraph(truncated_address, self.styles['PropertyHeader']))
                
                # Add property transactions directly (no summary table)
                story.extend(self._build_transactions_table(property_transactions))

        return story

    def _build_grand_summary_table(self, transactions):
        """Build the grand summary table for all properties"""
        # Group transactions by property
        property_summaries = {}
        
        for t in transactions:
            property_id = t.get('property_id')
            if not property_id:
                continue
                
            if property_id not in property_summaries:
                property_summaries[property_id] = {'income': 0, 'expense': 0}
            
            amount = self._parse_amount(t['amount'])
            if t.get('type', '').lower() == 'income':
                property_summaries[property_id]['income'] += amount
            else:
                property_summaries[property_id]['expense'] += amount

        # Create table data
        table_data = [['Property', 'Total Income', 'Total Expenses', 'Net Amount']]
        
        total_income = 0
        total_expenses = 0
        
        for property_id, summary in property_summaries.items():
            truncated_address = self._truncate_address(property_id)
            net = summary['income'] - summary['expense']
            table_data.append([
                truncated_address,
                f"${summary['income']:,.2f}",
                f"${summary['expense']:,.2f}",
                f"${net:,.2f}"
            ])
            total_income += summary['income']
            total_expenses += summary['expense']
        
        # Add totals row
        net_total = total_income - total_expenses
        table_data.append([
            'TOTAL',
            f"${total_income:,.2f}",
            f"${total_expenses:,.2f}",
            f"${net_total:,.2f}"
        ])

        # Create and style the table
        table = Table(table_data, colWidths=[2.5*inch, 1.5*inch, 1.5*inch, 1.5*inch])
        table.setStyle(TableStyle([
            # Header style
            ('BACKGROUND', (0, 0), (-1, 0), colors.navy),
            ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
            ('ALIGN', (0, 0), (-1, 0), 'CENTER'),
            ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
            ('FONTSIZE', (0, 0), (-1, 0), 10),
            
            # Data style
            ('FONTNAME', (0, 1), (-1, -1), 'Helvetica'),
            ('ALIGN', (1, 0), (-1, -1), 'RIGHT'),
            ('GRID', (0, 0), (-1, -1), 1, colors.black),
            
            # Total row style
            ('FONTNAME', (0, -1), (-1, -1), 'Helvetica-Bold'),
            ('BACKGROUND', (0, -1), (-1, -1), colors.lightgrey),
        ]))
        
        return [Paragraph("Grand Summary", self.styles['SubTitle']), table]

    def _build_property_summary_table(self, transactions):
        """Build the summary table for a property"""
        total_income = sum(self._parse_amount(t['amount']) 
                         for t in transactions if t.get('type', '').lower() == 'income')
        total_expenses = sum(self._parse_amount(t['amount']) 
                           for t in transactions if t.get('type', '').lower() == 'expense')
        net_amount = total_income - total_expenses
        
        summary_data = [
            ['Total Income:', f"${total_income:,.2f}"],
            ['Total Expenses:', f"${total_expenses:,.2f}"],
            ['Net Amount:', f"${net_amount:,.2f}"]
        ]
        
        summary_table = Table(summary_data, colWidths=[2*inch, 1.5*inch])
        summary_table.setStyle(TableStyle([
            ('FONTNAME', (0, 0), (-1, -1), 'Helvetica-Bold'),
            ('ALIGN', (1, 0), (1, -1), 'RIGHT'),
            ('TEXTCOLOR', (0, -1), (-1, -1), colors.HexColor('#000080')),
            ('FONTSIZE', (0, -1), (-1, -1), 11),
            ('TOPPADDING', (0, 0), (-1, -1), 4),
            ('BOTTOMPADDING', (0, 0), (-1, -1), 4),
        ]))
        
        return [Paragraph("Property Summary", self.styles['SubTitle']), summary_table]

    def _build_transactions_table(self, transactions):
        """Build the transactions table section with repeating header"""
        columns = [
            'Date',
            'Type',
            'Category',
            'Description',
            'Notes',  # Added Notes column
            'Amount',
            'Collector/Payer',
            'Status'
        ]
        
        table_data = [columns]
        
        for t in transactions:
            amount = t.get('amount', '$0.00')
            if not isinstance(amount, str):
                amount = f"${float(amount):,.2f}"

            # Wrap Category, Description, and Notes in Paragraph objects
            category = Paragraph(
                t.get('category', ''),
                self.styles['DescriptionCell']
            )
            description = Paragraph(
                t.get('description', ''),
                self.styles['DescriptionCell']
            )
            notes = Paragraph(
                t.get('notes', ''),
                self.styles['DescriptionCell']
            )
            
            row = [
                t.get('date', ''),
                t.get('type', ''),
                category,
                description,
                notes,  # Added notes
                amount,
                t.get('collector_payer', ''),
                t.get('reimbursement', {}).get('reimbursement_status', '')
            ]
            table_data.append(row)
        
        col_widths = [
            0.8*inch,   # Date
            0.7*inch,   # Type
            1.0*inch,   # Category
            1.5*inch,   # Description
            1.5*inch,   # Notes
            0.8*inch,   # Amount
            1.0*inch,   # Collector/Payer
            0.7*inch,   # Status
        ]
        
        # Create table with repeating header
        table = Table(table_data, colWidths=col_widths, repeatRows=1)
        
        style = [
            # Header style
            ('BACKGROUND', (0, 0), (-1, 0), colors.navy),
            ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
            ('ALIGN', (0, 0), (-1, 0), 'CENTER'),
            ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
            ('FONTSIZE', (0, 0), (-1, 0), 8),  # Reduced from 10
            ('BOTTOMPADDING', (0, 0), (-1, 0), 8),  # Reduced from 12
            
            # Data style
            ('FONTNAME', (0, 1), (-1, -1), 'Helvetica'),
            ('FONTSIZE', (0, 1), (-1, -1), 8),  # Reduced from 9
            ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
            ('ALIGN', (5, 1), (5, -1), 'RIGHT'),  # Right-align amounts (adjusted column index)
            ('GRID', (0, 0), (-1, -1), 1, colors.black),
            ('ROWBACKGROUNDS', (0, 1), (-1, -1), [colors.white, colors.lightgrey]),
            ('VALIGN', (0, 0), (-1, -1), 'MIDDLE'),
            ('TOPPADDING', (0, 1), (-1, -1), 4),  # Reduced from 6
            ('BOTTOMPADDING', (0, 1), (-1, -1), 4),  # Reduced from 6
        ]
        
        # Add color coding for income/expense amounts (adjusted column index)
        for i, row in enumerate(table_data[1:], 1):
            if row[1].lower() == 'income':
                style.append(('TEXTCOLOR', (5, i), (5, i), colors.green))
            else:
                style.append(('TEXTCOLOR', (5, i), (5, i), colors.red))
        
        table.setStyle(TableStyle(style))
        
        return [Paragraph("Transactions", self.styles['SubTitle']), table]

    def _parse_amount(self, amount_str):
        """Parse amount from string format"""
        if isinstance(amount_str, str):
            # Remove '$' and ',' then convert to float
            return float(amount_str.replace('$', '').replace(',', ''))
        return float(amount_str)