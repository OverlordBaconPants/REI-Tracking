"""
Transaction report generator module for the REI-Tracker application.

This module provides functionality for generating transaction reports in PDF format.
"""

import io
import logging
from typing import Dict, List, Any, Optional
from datetime import datetime
from decimal import Decimal

from reportlab.lib.pagesizes import letter, landscape
from reportlab.lib import colors
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.units import inch
from reportlab.platypus import (
    SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle, 
    PageBreak, Image, ListFlowable, ListItem
)

# Set up logger
logger = logging.getLogger(__name__)


class TransactionReportGenerator:
    """
    Service for generating transaction reports in PDF format.
    
    This class provides methods for creating summary and detailed transaction
    reports with customizable formatting.
    """
    
    def __init__(self):
        """Initialize the transaction report generator."""
        self.styles = getSampleStyleSheet()
        self._setup_custom_styles()
    
    def _setup_custom_styles(self):
        """Set up custom styles for the report."""
        # Title style
        self.styles.add(
            ParagraphStyle(
                name='CustomTitle',
                parent=self.styles['Title'],
                fontSize=16,
                spaceAfter=12
            )
        )
        
        # Heading style
        self.styles.add(
            ParagraphStyle(
                name='CustomHeading',
                parent=self.styles['Heading2'],
                fontSize=14,
                spaceAfter=10
            )
        )
        
        # Normal text style
        self.styles.add(
            ParagraphStyle(
                name='CustomNormal',
                parent=self.styles['Normal'],
                fontSize=10,
                spaceAfter=6
            )
        )
        
        # Table header style
        self.styles.add(
            ParagraphStyle(
                name='TableHeader',
                parent=self.styles['Normal'],
                fontSize=10,
                alignment=1,  # Center alignment
                textColor=colors.white
            )
        )
    
    def generate(
        self, 
        transactions: List[Dict[str, Any]], 
        output_buffer: io.BytesIO,
        metadata: Dict[str, Any]
    ) -> None:
        """
        Generate a transaction report.
        
        Args:
            transactions: List of transactions to include in the report
            output_buffer: Buffer to write the PDF to
            metadata: Report metadata (title, date range, property, etc.)
        """
        try:
            # Create document
            doc = SimpleDocTemplate(
                output_buffer,
                pagesize=landscape(letter),
                rightMargin=0.5*inch,
                leftMargin=0.5*inch,
                topMargin=0.5*inch,
                bottomMargin=0.5*inch
            )
            
            # Create story (content)
            story = []
            
            # Add title and metadata
            self._add_title_section(story, metadata)
            
            # Add summary section
            summary_data = self._process_summary_data(transactions)
            self._add_summary_section(story, summary_data)
            
            # Add transactions table
            self._add_transactions_table(story, transactions)
            
            # Build document
            doc.build(story)
            
        except Exception as e:
            logger.error(f"Error generating transaction report: {str(e)}")
            raise
    
    def _add_title_section(self, story: List, metadata: Dict[str, Any]) -> None:
        """
        Add title section to the report.
        
        Args:
            story: ReportLab story to add content to
            metadata: Report metadata
        """
        # Add title
        title = metadata.get("title", "Transaction Report")
        story.append(Paragraph(title, self.styles["CustomTitle"]))
        
        # Add metadata
        property_name = metadata.get("property_name", "All Properties")
        date_range = metadata.get("date_range", "All Dates")
        
        metadata_text = f"Property: {property_name}<br/>Date Range: {date_range}"
        if "generated_by" in metadata:
            metadata_text += f"<br/>Generated By: {metadata['generated_by']}"
        
        metadata_text += f"<br/>Generated On: {datetime.now().strftime('%Y-%m-%d %H:%M')}"
        
        story.append(Paragraph(metadata_text, self.styles["CustomNormal"]))
        story.append(Spacer(1, 0.2*inch))
    
    def _process_summary_data(self, transactions: List[Dict[str, Any]]) -> Dict[str, Any]:
        """
        Process transaction data to create summary information.
        
        Args:
            transactions: List of transactions
            
        Returns:
            Dictionary with summary data
        """
        # Initialize summary data
        summary = {
            "total_income": Decimal("0.00"),
            "total_expense": Decimal("0.00"),
            "net_amount": Decimal("0.00"),
            "income_by_category": {},
            "expense_by_category": {},
            "property_summary": {}
        }
        
        # Process each transaction
        for transaction in transactions:
            amount = Decimal(str(transaction["amount"]))
            category = transaction["category"]
            property_id = transaction["property_id"]
            transaction_type = transaction["type"]
            
            # Update totals
            if transaction_type == "income":
                summary["total_income"] += amount
                
                # Update income by category
                if category not in summary["income_by_category"]:
                    summary["income_by_category"][category] = Decimal("0.00")
                summary["income_by_category"][category] += amount
                
            else:  # expense
                summary["total_expense"] += amount
                
                # Update expense by category
                if category not in summary["expense_by_category"]:
                    summary["expense_by_category"][category] = Decimal("0.00")
                summary["expense_by_category"][category] += amount
            
            # Update property summary
            if property_id not in summary["property_summary"]:
                summary["property_summary"][property_id] = {
                    "income": Decimal("0.00"),
                    "expense": Decimal("0.00"),
                    "net": Decimal("0.00")
                }
            
            if transaction_type == "income":
                summary["property_summary"][property_id]["income"] += amount
            else:
                summary["property_summary"][property_id]["expense"] += amount
            
            summary["property_summary"][property_id]["net"] = (
                summary["property_summary"][property_id]["income"] - 
                summary["property_summary"][property_id]["expense"]
            )
        
        # Calculate net amount
        summary["net_amount"] = summary["total_income"] - summary["total_expense"]
        
        return summary
    
    def _add_summary_section(self, story: List, summary_data: Dict[str, Any]) -> None:
        """
        Add summary section to the report.
        
        Args:
            story: ReportLab story to add content to
            summary_data: Summary data
        """
        # Add summary heading
        story.append(Paragraph("Financial Summary", self.styles["CustomHeading"]))
        
        # Add overall summary
        total_income = f"${summary_data['total_income']:.2f}"
        total_expense = f"${summary_data['total_expense']:.2f}"
        net_amount = f"${summary_data['net_amount']:.2f}"
        
        overall_data = [
            ["Total Income", "Total Expense", "Net Amount"],
            [total_income, total_expense, net_amount]
        ]
        
        overall_table = Table(overall_data, colWidths=[2*inch, 2*inch, 2*inch])
        overall_table.setStyle(TableStyle([
            ('BACKGROUND', (0, 0), (-1, 0), colors.lightblue),
            ('TEXTCOLOR', (0, 0), (-1, 0), colors.white),
            ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
            ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
            ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
            ('GRID', (0, 0), (-1, -1), 1, colors.black),
        ]))
        
        story.append(overall_table)
        story.append(Spacer(1, 0.2*inch))
        
        # Add property summary if multiple properties
        if len(summary_data["property_summary"]) > 1:
            story.append(Paragraph("Property Summary", self.styles["CustomHeading"]))
            
            # Create property summary table
            property_data = [["Property", "Income", "Expense", "Net"]]
            
            for property_id, values in summary_data["property_summary"].items():
                property_data.append([
                    property_id,
                    f"${values['income']:.2f}",
                    f"${values['expense']:.2f}",
                    f"${values['net']:.2f}"
                ])
            
            property_table = Table(property_data, colWidths=[3*inch, 1.5*inch, 1.5*inch, 1.5*inch])
            property_table.setStyle(TableStyle([
                ('BACKGROUND', (0, 0), (-1, 0), colors.lightblue),
                ('TEXTCOLOR', (0, 0), (-1, 0), colors.white),
                ('ALIGN', (1, 0), (-1, -1), 'RIGHT'),
                ('ALIGN', (0, 0), (0, -1), 'LEFT'),
                ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
                ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
                ('GRID', (0, 0), (-1, -1), 1, colors.black),
            ]))
            
            story.append(property_table)
            story.append(Spacer(1, 0.2*inch))
        
        # Add category breakdowns
        story.append(Paragraph("Category Breakdown", self.styles["CustomHeading"]))
        
        # Create category tables
        income_data = [["Income Category", "Amount"]]
        for category, amount in sorted(
            summary_data["income_by_category"].items(), 
            key=lambda x: x[1], 
            reverse=True
        ):
            income_data.append([category, f"${amount:.2f}"])
        
        expense_data = [["Expense Category", "Amount"]]
        for category, amount in sorted(
            summary_data["expense_by_category"].items(), 
            key=lambda x: x[1], 
            reverse=True
        ):
            expense_data.append([category, f"${amount:.2f}"])
        
        # Create tables side by side
        income_table = Table(income_data, colWidths=[2.5*inch, 1.5*inch])
        income_table.setStyle(TableStyle([
            ('BACKGROUND', (0, 0), (-1, 0), colors.lightblue),
            ('TEXTCOLOR', (0, 0), (-1, 0), colors.white),
            ('ALIGN', (1, 0), (1, -1), 'RIGHT'),
            ('ALIGN', (0, 0), (0, -1), 'LEFT'),
            ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
            ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
            ('GRID', (0, 0), (-1, -1), 1, colors.black),
        ]))
        
        expense_table = Table(expense_data, colWidths=[2.5*inch, 1.5*inch])
        expense_table.setStyle(TableStyle([
            ('BACKGROUND', (0, 0), (-1, 0), colors.lightblue),
            ('TEXTCOLOR', (0, 0), (-1, 0), colors.white),
            ('ALIGN', (1, 0), (1, -1), 'RIGHT'),
            ('ALIGN', (0, 0), (0, -1), 'LEFT'),
            ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
            ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
            ('GRID', (0, 0), (-1, -1), 1, colors.black),
        ]))
        
        category_tables = Table([[income_table, expense_table]], colWidths=[4.5*inch, 4.5*inch])
        category_tables.setStyle(TableStyle([
            ('LEFTPADDING', (0, 0), (-1, -1), 10),
            ('RIGHTPADDING', (0, 0), (-1, -1), 10),
        ]))
        
        story.append(category_tables)
        story.append(Spacer(1, 0.3*inch))
    
    def _add_transactions_table(self, story: List, transactions: List[Dict[str, Any]]) -> None:
        """
        Add transactions table to the report.
        
        Args:
            story: ReportLab story to add content to
            transactions: List of transactions
        """
        # Add transactions heading
        story.append(Paragraph("Transaction Details", self.styles["CustomHeading"]))
        
        # Define table headers
        headers = [
            "Date", "Property", "Type", "Category", 
            "Description", "Amount", "Collector/Payer", "Status"
        ]
        
        # Create table data
        data = [headers]
        
        # Add transaction rows
        for transaction in sorted(transactions, key=lambda x: x["date"]):
            # Format amount with currency symbol
            amount = f"${float(transaction['amount']):.2f}"
            
            # Determine status
            if transaction.get("reimbursement"):
                status = transaction["reimbursement"].get("reimbursement_status", "pending")
                status = status.replace("_", " ").title()
            else:
                status = "N/A"
            
            # Add row
            data.append([
                transaction["date"],
                transaction["property_id"],
                transaction["type"].title(),
                transaction["category"],
                transaction["description"],
                amount,
                transaction["collector_payer"],
                status
            ])
        
        # Create table
        col_widths = [0.8*inch, 2*inch, 0.8*inch, 1.2*inch, 2.5*inch, 0.8*inch, 1.2*inch, 0.8*inch]
        table = Table(data, colWidths=col_widths, repeatRows=1)
        
        # Style the table
        table.setStyle(TableStyle([
            # Header style
            ('BACKGROUND', (0, 0), (-1, 0), colors.lightblue),
            ('TEXTCOLOR', (0, 0), (-1, 0), colors.white),
            ('ALIGN', (0, 0), (-1, 0), 'CENTER'),
            ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
            ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
            
            # Data style
            ('FONTNAME', (0, 1), (-1, -1), 'Helvetica'),
            ('FONTSIZE', (0, 1), (-1, -1), 8),
            ('ALIGN', (5, 1), (5, -1), 'RIGHT'),  # Amount column right-aligned
            ('ALIGN', (0, 1), (0, -1), 'CENTER'),  # Date column centered
            ('ALIGN', (2, 1), (2, -1), 'CENTER'),  # Type column centered
            ('ALIGN', (7, 1), (7, -1), 'CENTER'),  # Status column centered
            
            # Grid style
            ('GRID', (0, 0), (-1, -1), 0.5, colors.grey),
            ('VALIGN', (0, 0), (-1, -1), 'MIDDLE'),
            
            # Alternating row colors
            ('ROWBACKGROUNDS', (0, 1), (-1, -1), [colors.white, colors.lightgrey]),
        ]))
        
        # Add table to story
        story.append(table)
    
    def generate_zip_archive(
        self, 
        transactions: List[Dict[str, Any]], 
        output_buffer: io.BytesIO
    ) -> None:
        """
        Generate a ZIP archive with transaction documentation.
        
        Args:
            transactions: List of transactions with documentation
            output_buffer: Buffer to write the ZIP archive to
        """
        # This method would be implemented to create a ZIP archive
        # containing all documentation files associated with the transactions.
        # For now, this is a placeholder.
        pass
